version: '3.8'

services:
  # Aplicação Next.js
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: dashboard-iptv:latest
    container_name: dashboard-iptv-app
    restart: unless-stopped
    depends_on:
      - mysql
    environment:
      - NODE_ENV=production
      - DB_HOST=mysql
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - JWT_SECRET=${JWT_SECRET}
      - CRON_SECRET=${CRON_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - EVOLUTION_API_URL=${EVOLUTION_API_URL}
      - EVOLUTION_API_KEY=${EVOLUTION_API_KEY}
    networks:
      - traefik-network
      - internal
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik-network"
      - "traefik.http.routers.dashboard-iptv.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.dashboard-iptv.entrypoints=websecure"
      - "traefik.http.routers.dashboard-iptv.tls.certresolver=letsencrypt"
      - "traefik.http.services.dashboard-iptv.loadbalancer.server.port=3000"
      - "traefik.http.routers.dashboard-iptv.middlewares=secure-headers@file"
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Banco de dados MySQL
  mysql:
    image: mysql:8.0
    container_name: dashboard-iptv-mysql
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
      - MYSQL_DATABASE=${DB_NAME}
      - MYSQL_USER=${DB_USER}
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - TZ=America/Sao_Paulo
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/init:/docker-entrypoint-initdb.d
      - ./mysql/conf:/etc/mysql/conf.d
    ports:
      - "3306:3306"
    networks:
      - internal
    command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --innodb-buffer-pool-size=256M
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "${DB_USER}", "-p${DB_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Cron Jobs
  cron:
    build:
      context: .
      dockerfile: Dockerfile.cron
    image: dashboard-iptv-cron:latest
    container_name: dashboard-iptv-cron
    restart: unless-stopped
    depends_on:
      - app
      - mysql
    environment:
      - NODE_ENV=production
      - APP_URL=http://app:3000
      - CRON_SECRET=${CRON_SECRET}
      - TZ=America/Sao_Paulo
    networks:
      - internal
    volumes:
      - ./cron/logs:/app/logs
      - ./cron/scripts:/app/scripts
      - cron_config:/app/config
    healthcheck:
      test: ["CMD", "ps", "aux", "|", "grep", "-v", "grep", "|", "grep", "crond"]
      interval: 60s
      timeout: 10s
      retries: 3

  # Redis para cache (opcional)
  redis:
    image: redis:7-alpine
    container_name: dashboard-iptv-redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - internal
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  cron_config:
    driver: local

networks:
  traefik-network:
    external: true
  internal:
    driver: bridge 