#!/bin/bash

# Script de setup inicial da VPS para Dashboard IPTV
echo "üöÄ Iniciando setup da VPS para Dashboard IPTV..."

# Definir vari√°veis
PROJECT_DIR="/opt/dashboard-iptv"
DOMAIN="dashboard.seudominio.com"
DB_NAME="dashboard_iptv"
DB_USER="dashboard_user"

# Verificar se est√° rodando como root
if [ "$EUID" -ne 0 ]; then
    echo "‚ùå Este script deve ser executado como root"
    exit 1
fi

# Atualizar sistema
echo "üì¶ Atualizando sistema..."
apt update && apt upgrade -y

# Instalar depend√™ncias
echo "üîß Instalando depend√™ncias..."
apt install -y \
    git \
    curl \
    wget \
    htop \
    unzip \
    vim \
    fail2ban \
    ufw \
    certbot

# Instalar Docker se n√£o estiver instalado
if ! command -v docker &> /dev/null; then
    echo "üê≥ Instalando Docker..."
    curl -fsSL https://get.docker.com | sh
    systemctl enable docker
    systemctl start docker
fi

# Instalar Docker Compose se n√£o estiver instalado
if ! command -v docker-compose &> /dev/null; then
    echo "üê≥ Instalando Docker Compose..."
    curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    chmod +x /usr/local/bin/docker-compose
fi

# Verificar se Traefik est√° rodando
if ! docker ps | grep -q traefik; then
    echo "‚ö†Ô∏è Traefik n√£o est√° rodando. Certifique-se de que est√° configurado corretamente."
    echo "Rede traefik-network deve existir para continuar."
    exit 1
fi

# Criar diret√≥rio do projeto
echo "üìÅ Criando diret√≥rio do projeto..."
mkdir -p $PROJECT_DIR
cd $PROJECT_DIR

# Clonar reposit√≥rio (substitua pela sua URL)
echo "üì• Clonando reposit√≥rio..."
read -p "Digite a URL do seu reposit√≥rio GitHub: " REPO_URL
git clone $REPO_URL .

# Configurar permiss√µes
echo "üîí Configurando permiss√µes..."
mkdir -p logs cron/logs mysql/data mysql/init mysql/conf
chmod 755 logs cron/logs
chmod 755 cron/scripts/*.sh

# Criar arquivo de ambiente
echo "‚öôÔ∏è Criando arquivo de ambiente..."
cat > .env << EOF
# Configura√ß√µes de produ√ß√£o - Dashboard IPTV
NODE_ENV=production
PORT=3000
DOMAIN=$DOMAIN

# Configura√ß√µes do banco de dados
DB_HOST=mysql
DB_USER=$DB_USER
DB_PASSWORD=$(openssl rand -base64 32)
DB_NAME=$DB_NAME
DB_ROOT_PASSWORD=$(openssl rand -base64 32)

# Configura√ß√µes de seguran√ßa
JWT_SECRET=$(openssl rand -base64 64)
CRON_SECRET=$(openssl rand -base64 32)
ENCRYPTION_KEY=$(openssl rand -base64 32 | cut -c1-32)

# Configura√ß√µes da Evolution API
EVOLUTION_API_URL=https://evo.qpainel.com.br
EVOLUTION_API_KEY=sua_api_key_evolution
EOF

# Configurar firewall
echo "üõ°Ô∏è Configurando firewall..."
ufw allow ssh
ufw allow 80/tcp
ufw allow 443/tcp
ufw --force enable

# Configurar fail2ban
echo "üîí Configurando fail2ban..."
systemctl enable fail2ban
systemctl start fail2ban

# Configurar logrotate
echo "üìÑ Configurando logrotate..."
cat > /etc/logrotate.d/dashboard-iptv << EOF
$PROJECT_DIR/logs/*.log {
    daily
    missingok
    rotate 30
    compress
    delaycompress
    notifempty
    sharedscripts
    postrotate
        docker-compose -f $PROJECT_DIR/docker-compose.yml restart app
    endscript
}
EOF

# Configurar backup autom√°tico
echo "üíæ Configurando backup autom√°tico..."
cat > /etc/cron.d/dashboard-iptv-backup << EOF
# Backup di√°rio do banco de dados √†s 2:00 AM
0 2 * * * root /opt/dashboard-iptv/deploy/backup.sh >> /var/log/backup.log 2>&1
EOF

# Primeiro deploy
echo "üöÄ Realizando primeiro deploy..."
docker-compose up -d

# Aguardar aplica√ß√£o ficar dispon√≠vel
echo "‚è≥ Aguardando aplica√ß√£o ficar dispon√≠vel..."
sleep 30

# Verificar se est√° funcionando
if curl -f http://localhost:3000/api/health > /dev/null 2>&1; then
    echo "‚úÖ Aplica√ß√£o est√° funcionando!"
else
    echo "‚ùå Aplica√ß√£o n√£o est√° respondendo. Verifique os logs:"
    docker-compose logs
fi

# Informa√ß√µes finais
echo "üéâ Setup conclu√≠do!"
echo ""
echo "üìã Pr√≥ximos passos:"
echo "1. Configure o DNS para apontar $DOMAIN para este servidor"
echo "2. Configure as vari√°veis de ambiente no arquivo .env"
echo "3. Execute 'docker-compose restart' ap√≥s configurar as vari√°veis"
echo "4. Configure os secrets do GitHub Actions:"
echo "   - SSH_PRIVATE_KEY: sua chave SSH privada"
echo "   - HOST: IP do servidor"
echo "   - USERNAME: usu√°rio SSH"
echo "   - DOMAIN: $DOMAIN"
echo ""
echo "üìÇ Arquivos importantes:"
echo "- Projeto: $PROJECT_DIR"
echo "- Logs: $PROJECT_DIR/logs"
echo "- Backup: /etc/cron.d/dashboard-iptv-backup"
echo "- Ambiente: $PROJECT_DIR/.env"
echo ""
echo "üîß Comandos √∫teis:"
echo "- Ver logs: docker-compose logs -f"
echo "- Restart: docker-compose restart"
echo "- Status: docker-compose ps"
echo "- Backup manual: $PROJECT_DIR/deploy/backup.sh" 